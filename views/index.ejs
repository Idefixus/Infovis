<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
		<title>Germany bubble map</title>
   
		<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>	
		<link rel="stylesheet" type="text/css" href="style2.css" />
		
	</head>
	
	<body>
		<script>
			function bubbleclick(d) {
				 $.ajax({
					url: "/drawlinechart",
					data: { city: d.city }
				})
				.done(function( data ) {
					drawChart(data.monthdata, d.city, data.top5);
				});
			}
			

			var event = <%- JSON.stringify(currentevent) %>;
			console.log("Current event: " + event.name);

			var action = event.name;
		</script>
		
		<form method="post" id="post">
		<button type="submit" id="event"></button>
		</form>
		<script> 
			$("#event").click(function(){
				$("#post").attr("action", action)
			});
		</script>
		<script>
			
			var prepend = '<img style="width: 40px;length: 40px;border-radius: 50%;border: 1px solid #000000;left: 30px; top:60px" id=" ' + event.name + '" src=" ' + event.image + '" />';
			console.log(prepend);
			$( "#event" ).prepend(prepend);
      
		</script>

		<script type="text/javascript" src="http://mbostock.github.com/d3/d3.js?2.7.4"></script>
		<script>

			width= 710;
			height= 650;
			
			var citydata = <%- JSON.stringify(cityarray) %>;

			// focusing map on SVG
			xy=d3.geo.mercator().translate([-100,3000]).scale(16000)
			path=d3.geo.path().projection(xy);

			var svg2 = d3.select("body").append("span")
				.append("svg")
				.attr("class","svgbig")
				.append("g")
				.attr("id", "polygons");
			
			// add description for map graph 
			svg2.append("text")
				.attr("text-anchor", "middle")
				.attr("transform", "translate(" + (width/2) + " ,40)")
				.text("Amount of newspaper references for German cities in 2018")
				.attr("class", "descrtext");
  
			// define the div for the tooltip
			var div = d3.select("body").append("div")	
				.attr("class", "tooltip")				
				.style("opacity", 0);

			// draw the map
			d3.json('germany.geojson', function(collection) {
				d3.select("#polygons")
					.selectAll("path")
					.data(collection.features)
					.enter().append("path")
					.attr("class","countrypath")
					.attr("d", d3.geo.path().projection(xy));
			});

			// add city data to map
			d3.json('datapublishers.json', function(data) {

				var force = d3.layout.force()
				//  .gravity(0)
					.charge(-0.7)
					.nodes(data.features)
					.size([0, 0]);
					//.start();

				var node = d3.select("svg").selectAll("g")
					.data(data.features)  
					.enter().append("g")
					.attr("id", function(d){ return d.city;})
					  
				node.append("circle")
					.attr("transform", function(d) { 
						return "translate(" + xy(d.coordinates) + ")"; })
					.attr("id", function(d){ return d.id;})
					.attr("class", "node")
					.on("click", bubbleclick)
					.on("mouseover", function(d, index) {		
						div.transition()		
							.duration(100)		
							.style("opacity", .9);		
						div.html(citydata[index].city + "<br/>" + citydata[index].sum)
							.style("left", (d3.event.pageX) + "px")		
							.style("top", (d3.event.pageY - 28) + "px");	
					})					
					.on("mouseout", function(d) {		
						div.transition()		
							.duration(200)		
							.style("opacity", 0);	
					})
					.attr('r', function(d, index) { 
						return citydata[index].sum/50});
					//.call(force.drag);

					force.on("tick", function() {
						node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; }
                        );
                    }); 
                    
			});
			
		</script>
		
		
		<script src="https://d3js.org/d3.v5.min.js"></script>
		<script>

		// set the dimensions and margins of the graph
		var margin = {top: 80, right: 50, bottom: 30, left: 80},
			width = 710 - margin.left - margin.right,
			height = 650 - margin.top - margin.bottom*3,
			middle = 250;
			
		// set the ranges
		var x = d3.scaleTime().range([0, width]);
		var y = d3.scaleLinear().domain([2000,0]).range([height-middle, 0]);

		// define the line for the line chart
		var valueline = d3.line()
			.x(function(d) { return x(d.Year); })
			.y(function(d) { return y(d.Amount); });
			
		// define the div for the tooltip
		var div = d3.select("body").append("div")	
			.attr("class", "tooltip")				
			.style("opacity", 0);

		// prepare the base for adding graphs later
		var bodysvg = d3.select("body").append("span").append("svg").attr("class","svgbig").attr("id","preview");
		
		// appends the svg obgect to the body of the page
		// appends a 'group' element to 'svg'
		// moves the 'group' element to the top left margin
		var svg = bodysvg.append("svg")
			.attr("class","svgsmall")
			.attr("width", width + margin.left + margin.right)
			.attr("height", height + margin.top + margin.bottom)
			.append("g")
			.attr("transform",
				"translate(" + margin.left + "," + margin.top + ")");
				
		// appends svg element to the body for displaying the bar chart
		var graph = bodysvg
				.append("svg")
				.attr("class", "svgsmall")
				.attr("transform","translate(0 ," + (height - middle/2 + margin.top) + ")")
				.attr("width", width+ margin.left + margin.right)
				//.attr("height", barHeight * data2.length);  
				.attr("height", margin.top*3);
		
		var parseTime = d3.timeParse("%m");
		var formatTime = d3.timeFormat("%m");
		
		// set a default text if no graphs are displayed
		svg.append("text")
			.attr("text-anchor", "middle")
			.attr("transform", "translate(" + (width/2) + " ," + (height/2) + ")")
			.attr("class", "infotext")
			.text("click on a bubble to see further details");
		
		
		// draws a line and bar chart
		var drawChart = function(monthdata, cityname, top5) {
			
			// clear svg elements
			svg.selectAll("*").remove();
			graph.selectAll("*").remove();
			
			
			//-----------------------------------------------------------------------
			//--------|  Linechart:  |-----------------------------------------------
			//-----------------------------------------------------------------------
				
			var data = monthdata;
			
			// text label for selected city
			svg.append("text")             
				.attr("transform", "translate(" + (width/2) + " , "+ (-margin.top/2) +")")
				.style("text-anchor", "middle")
				.attr("class","fattext")
				.text(cityname);

			// formats the data
			data.forEach(function(d) {
				d.Year = parseTime(d.Year);
				d.Amount = +d.Amount;
			});

			// scales the range of the data
			x.domain(d3.extent(data, function(d) { return d.Year}));
			y.domain([0, d3.max(data, function(d) { return d.Amount; })]);

			// adds the valueline path
			svg.append("path")
				.data([data])
				.attr("class", "line")
				.attr("d", valueline);

			// adds the x axis
			svg.append("g")
				.attr("transform", "translate(0," + (height-middle)  + ")")
				.call(d3.axisBottom(x).tickFormat(d3.timeFormat("%B")));  

			// text label for the x axis
			svg.append("text")             
				.attr("transform",
					"translate(" + (width/2) + " ," + (height + margin.right -middle) + ")")
				.style("text-anchor", "middle")
				.text("2018");

			// adds the y axis
			svg.append("g")
				.call(d3.axisLeft(y));

			// text label for the y axis
			svg.append("text")
				.attr("transform", "rotate(-90)")
				.attr("y", 0 - margin.left+10)
				.attr("x",0 - ((height-middle) / 2))
				.attr("dy", "1em")
				.style("text-anchor", "middle")
				.text("Percentage of articles about this city");  
		
				// appends a circle for each datapoint 
			svg.selectAll(".dot")
				.data(data)
				.enter()
				.append("circle") 
				.attr("class", "dot") 
				.attr("cx", function(d) { return x(d.Year) })
				.attr("cy", function(d) { return y(d.Amount) })
				.attr("r", 5)
				.on("mouseover", function (d) { 
					d3.select(this).style("fill", "#B55038"); 
					div.transition()		
						.duration(200)		
						.style("opacity", .9);		
					div.html("Month: " + formatTime(d.Year) + "<br/>"  + d.Amount + "%")	
						.style("left", (d3.event.pageX) + "px")		
						.style("top", (d3.event.pageY - 28) + "px");	
				})
				.on("mouseout", function(d) {
					d3.select(this).style("fill", "#364C5F");
					div.transition()		
						.duration(500)		
						.style("opacity", 0);	
				});
				
			//-----------------------------------------------------------------------
			//--------|  Barchart:  |------------------------------------------------
			//-----------------------------------------------------------------------
				
			var barHeight = 30;
			var data2 = top5;

			// adds a title to the bar chart
			svg.append("text")
				.attr("text-anchor", "middle")
				.attr("transform", "translate("+ (margin.left/2) +" ," + (height-middle/2) + ")")
				.attr("class","descrtext")
				.text("Top 5 keywords:");
                
			// appends a group element for every data entry to the svg
			// and assigns the data to it
			var bar = graph.selectAll("g")
				.data(data2)
				.enter()
				.append("g")
				.attr("transform", function(d, i) {
					return "translate(250," + (i*barHeight+margin.top/3) + ")";
				});
				
			// draws a bar for every data entry
			bar.append("rect")
				.attr("width", function(d) {
					return d.anzahl;
				})
				.attr("height", barHeight - 1)
				.on("mouseover", function (d) { 
					d3.select(this).style("fill", "#B55038"); })
				.on("mouseout", function(d) {
					d3.select(this).style("fill", "#364C5F"); });
             
			// adds the keyword string to every bar
			bar.append("text")
				.attr("x", function(d) {return -5;}) 
				.attr("y", barHeight / 2)
				.attr("dy", ".35em")
				.style("text-anchor", "end")
				.text(function(d) { return d.keyword; });		

			// adds number of occurrences to every bar
			bar.append("text")
				.attr("x", function(d) {
					var space = 10;
					if (d.anzahl > 9) space = 15;
					if (d.anzahl > 99) space = 22;
					if (d.anzahl > 999) space = 30;
					return (d.anzahl + space); })
				.attr("y", barHeight / 2)
				.attr("dy", ".35em")
				.style("text-anchor", "end")
				.text(function(d) { return d.anzahl; });	
				
		}
		
		</script>	
		<span id="previewtext" style="display: none;"></span>
		
		<script>

		$("#event").hover(function() {
			$('#preview').toggle();
			$('#previewtext').css("display", "inline-block");

			var expression = event.name;
			switch(expression) {
				case "maassen":
				//$("#previewtext").append('<div>hello this is text inside an svg container</div>'); 
				//$("#previewtext").append('<image xlink:href="Maaßen.jpg" x="0" y="0" height="50px" width="50px"></image>');
				$("#previewtext").append('<div id ="maassen" class="modal-body"><div class= form-group><div class="panel panel-default">Name: <%= data.Name %></div><img src="Maaßen.jpg" width="80px" height="120px" alt="Hans-Georg-Maaßen"><div style="width: 710px;" class="form-group">Bio: <%= data.ShortBio %></div><div style="width: 710px;" class="">Ereignisse: <%= data.Ereignisse %></div></div></div>');
					break;
				case "oktoberfest":
				$("#previewtext").append('This is Oktoberfest');
					break;
				default:
				$("#previewtext").append('This is default');
				} 

			console.log("Toggle");
			
		}, function() {
			$('#preview').toggle();
			$('#previewtext').toggle().empty();
		});

		</script>
		
	</body>
</html>
